Date: Oct. 28. 2018

**GDB basics**

GDB는 GNU Debugger의 약자로, GNU에서 제작한 아주 강력한 debugger이다. 매우 정밀한 디버깅이 가능하다. 그런데 open source로 공개되어 무료로 사용가능하다.  
참고로 디버깅은 프로그램의 논리적 오류(bug)를 찾아내는 테스트 과정을 얘기한다. 한 마디로, 디버거는 항상 내가 직접 해야 했던 디버깅 과정을 조금 수월하게 할 수 있게끔 도돠주는 보조 장치라 할 수 있겠다.  
GDB는 GUI가 아닌 Kernel console을 기반으로 사용되는 툴이다. 그래서 관련된 여러가지 command를 외우는 것이 필수다.



*GDB 사용법*

우선 linux kernel 창에서 GCC를 이용해서 컴파일할 때 -g옵션을 써서 컴파일 해 줘야 한다.  
eg) $ gcc -g -W -Wall -o hello hello.c  

저렇게 해당 프로그램을 벌려두고  

$ gdb hello  
이렇게 hello라는 파일을 gdb를 통해 실행시켜 준다. 이러면 이제 gdb의 각종 커맨드들로 코드를 탐색할 준비가 됐다.  



*GDB common commands*

- run  

프로그램을 실행하고 싶다면  
(gdb) run   혹은 (gdb) r  혹은 (gdb) run arg1 arg2 arg3...  
도 가능하다.


- setting a breakpoint  

만약 main에 breakpoint를 걸고 싶다면  
(gdb) break main  
해주면 된다.  
main의 주소가 0X12라면  
(gdb) break *0X12  
그리고 main의 시작점이 해당 C코드의 몇 번째 줄인지를 알고 있다면(12번째 줄이면)  
(gdb) hello: 12  
해주면 된다.  

그 외에 break +, break -, tbreak, break if, clear, delete 등이 있다.  


- after breakpoints  

breakpoint에 멈춘 상태에서 다시 재개하고 싶다면  
(gdb) continue 혹은 c를 해주면  
그 다음 breakpoint가 나올 때까지 다시 코드를 재개한다.  


- step in과 step over  

breakpoint에 걸린 후에는 instruction이나 해당 C 코드에 step in과 step over할 수 있다.  

step in:   
step over:   

먼저 C 코드의 다음 줄을 실행시키고 STEP INTO function 하려면  
(gdb) step 혹은 s  
C 코드가 아닌 다음 instruction을 실행시키고 STEP INTO functions 하려면  
(gdb) stepi 혹은 si  


역시 C 코드의 다음 줄을 실행시키고 STEP OVER functions 하려면  
(gdb) next 혹은 n  
C 코드가 아닌 다음 instruction을 실행시키고 STEP OVER functions 하려면  
(gdb) nexti 혹은 ni  


step in 혹은 step over 한 후에 step out 하려면
(gdb) finish 혹은 fin  


- Assembly Instructions

해당 C코드의 특정 function(main이라 치자) 어셈블리 보기  
(gdb) disassemble main 혹은 disas main  

만약 main의 주소가 0X12라면  
(gdb) disassemble 0X12  
도 가능하다.  

그리고 추가로 이것저것 가능한데, 아래의 예제를 통해 더 공부하자.  

위의 코드 disassemble과 main 사이 자리에 /m, /r 등을 추가할 수 있다.  
/m은 해당 어셈블리 코드와 상응하는 C 소스코드 라인을 함께 보여준다.  
/r은 해당 어셈블리 코드와 각각의 줄의 raw byte value를 보여준다.  



*관련 example codes(http://visualgdb.com/gdbreference/commands/disassemble)*

우선 우리의 코드는
C++:
int func(int a, int b)
{
    return a + b;
}

int main()
{
    return func(1, 2);
}

여러가지 


