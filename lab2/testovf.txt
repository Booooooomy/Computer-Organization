name: Beomjoo Kim
UID: 605128830

I made a c file with a given code, which is

_Bool testovf(long n)
{
	return n + 9223372036854775807 < n;
}

and ran the code with 3 different commands from GCC.

-O2:

raised the level of the optimization to 2.

the result was:

   0:	31 c0                	xor    %eax,%eax
   2:	c3                   	retq   

The level of optimization 2 is pretty high. This causes the compiler to ignore the overflow case. Since it is not true, we get the result of FALSE for n + 9223372036854775807 < n. Thus it returns 0 by XORing with itself.


-O2 -fwrapv:

This command wraps up even for the signed value when an overflow happens.

   0:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
   7:	ff ff 7f 
   a:	48 01 f8             	add    %rdi,%rax
   d:	48 39 c7             	cmp    %rax,%rdi
  10:	0f 9f c0             	setg   %al
  13:	c3                   	retq   

So the -fwrapv method does the computation and compares the result.
This is a translation of a source code.
Even if there's an overflow, it would have it without any warning.


-O2 -fsanitize=undefined:

   0:	55                   	push   %rbp
   1:	53                   	push   %rbx
   2:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
   9:	ff ff 7f 
   c:	48 89 fd             	mov    %rdi,%rbp
   f:	48 89 fb             	mov    %rdi,%rbx
  12:	48 83 ec 08          	sub    $0x8,%rsp
  16:	48 01 d5             	add    %rdx,%rbp
  19:	70 0d                	jo     28 <testovf+0x28>
  1b:	48 39 eb             	cmp    %rbp,%rbx
  1e:	0f 9f c0             	setg   %al
  21:	48 83 c4 08          	add    $0x8,%rsp
  25:	5b                   	pop    %rbx
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   
  28:	48 89 fe             	mov    %rdi,%rsi
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	callq  35 <testovf+0x35>
  35:	eb e4                	jmp    1b <testovf+0x1b>

So basically, line c to line 19 and 2c to 39 shows the case of overflow. If overflow happens, GCC calls a function to handle the overflow.
If not, it will skip the 'if' part that I mentioned above, and will do the normal comparisons.
